
import { DataTypes } from "sequelize"; // импортируем DataTypes у sequelize,чтобы описывать типы полей для таблиц в базе данных postgreSql

import db from "../db.js"; // указываем здесь расширение файла .js,иначе не находит файл и выдает ошибку

// если уже описали и создали таблицу в базе данных postgreSql,но потом захотели удалить у этой таблицы поле,то нужно удалить всю таблицу в pgAdmin и заново создать и отправить запрос на создания таблицы и объекта в базе данных postgreSql

// создаем сущность товара(таблицу товара в базе данных postgreSql),первым параметром у define указываем название таблицы,вторым - объект в котором описываем поля,которые будут у этой сущности(таблицы), и здесь должно быть отдельное поле для ссылки на category(категорию) и taste(вкус),то есть какие объекты из таблицы category и taste принадлежат таблице товара(Product),но мы его сейчас не указываем,оно будет подставлено автоматически с помощью sequelize,когда мы будем указывать связи этих всех таблиц
const Product = db.define('product',{

    id:{type:DataTypes.INTEGER, primaryKey:true, autoIncrement:true}, // описываем поле id,указываем тип INTEGER у DataTypes, указываем,что это первичный ключ(primaryKey:true, то есть это поле уникально и обязательно,и что оно однозначно идентифицирует каждую запись(каждый типа объект таблицы) в таблице), и что это authIncrement,чтобы с новой записью это поле автоматически увеличивалось на 1

    name:{type:DataTypes.STRING, unique:true, allowNull:false}, // указываем, что это поле уникально(unique:true),то есть другого такого же не может быть в этой таблице, и указываем этому полю еще свойство allowNull:false,то есть оно не может быть null(пустым)

    price:{type:DataTypes.FLOAT, allowNull:false}, // указываем полю для цены тип DataTypes.FLOAT( float - тип данных числа с запятой(точкой),типа 0.5)

    priceFilter:{type:DataTypes.STRING, allowNull:false},

    amount:{type:DataTypes.INTEGER, allowNull:false, defaultValue:1}, // указываем этому полю значение по умолчанию 1 (defaultValue:1)

    totalPrice:{type:DataTypes.FLOAT, allowNull:false},

    rating:{type:DataTypes.FLOAT, allowNull:false, defaultValue:0}, // указываем полю для рейтинга тип DataTypes.FLOAT( float - тип данных числа с запятой(точкой),типа 0.5)

    image:{type:DataTypes.STRING, allowNull:false}, // указываем этому полю для изображения тип STRING,так как там будем хранить только название файла и его расширение, указываем этому полю еще свойство allowNull:false,то есть оно не может быть null(пустым)

})

// создаем сущность(таблицу) для категории,чтобы потом связать эту таблицу с таблицей Product(товара)
const Category = db.define('category',{

    id:{type:DataTypes.INTEGER, primaryKey:true, autoIncrement:true}, // описываем поле id,указываем тип INTEGER у DataTypes, указываем,что это первичный ключ(primaryKey:true, то есть это поле уникально и обязательно,и что оно однозначно идентифицирует каждую запись(каждый типа объект таблицы) в таблице), и что это authIncrement,чтобы с новой записью это поле автоматически увеличивалось на 1

    category: {type:DataTypes.STRING, allowNull:false}

})

// создаем сущность(таблицу) для типа вкуса(сладкий,горький и тд)
const Taste = db.define('taste',{

    id:{type:DataTypes.INTEGER, primaryKey:true, autoIncrement:true}, // описываем поле id,указываем тип INTEGER у DataTypes, указываем,что это первичный ключ(primaryKey:true, то есть это поле уникально и обязательно,и что оно однозначно идентифицирует каждую запись(каждый типа объект таблицы) в таблице), и что это authIncrement,чтобы с новой записью это поле автоматически увеличивалось на 1

    taste: {type:DataTypes.STRING, allowNull:false}

})



// описываем связи между таблицами, hasMany(связь 1 ко многим,типа один объект этой таблицы может иметь связь с многими объектами другой таблицы), hasOne - связь 1 к 1(один объект этой таблицы может иметь одну связь(то есть будет отдельное поле у объекта одной таблицы, в котором будет указан id объекта другой таблицы,который принадлежит этой таблице) с объектом другой таблицы)

Category.hasMany(Product); // указываем,что одна запись(объект сущности(таблицы)) Category может иметь много связей с сущностью Product(с многими объектами из сущности Product), то есть один объект и таблицы Category может иметь много полей с id разных товаров,которые связаны с этим объектом из таблицы Category
Product.belongsTo(Category); // указываем,что сущность Product принадлежит сущности Category, то есть каждый объект из таблицы Product имеет поле с id объекта из таблицы Category(то есть категорию товара)

Taste.hasMany(Product); // указываем,что один объект из таблицы Taste может иметь много полей с id разных объектов из таблицы Product(то есть один тип вкуса может иметь связь с разными объектами товаров)
Product.belongsTo(Taste); // указываем, что каждый объект из таблицы Product имеет поле с id объекта из таблицы Taste(то есть каждый объект товара имеет поле с типом вкуса)

// экспортируем объект с полями всех таблиц,которые мы создали
export default {
    Product,
    Category,
    Taste
}